Old Demo script update

 //yuck put this in metohds please
        if(Input.GetKeyDown(KeyCode.Return))
        {
            // Code way of entering data, using form for now
            // Blackboard.Instance.SetValue("value",value);
            // Blackboard.Instance.SetValue<string>("text", myText.text);
            SaveToJson();
        }
        if (Input.GetKeyDown(KeyCode.Space))
        {
            //enter data
            Debug.Log( Blackboard.Instance.GetValue<int>("value"));
        }
        if (Input.GetKeyDown(KeyCode.LeftShift))
        {
            //enter data
            Debug.Log(Blackboard.Instance.GetValue<string>("text"));
        }
        if (Input.GetKeyDown(KeyCode.RightShift))
        {
            //enter data
            Blackboard.Instance.SetValue<string>("text","TestText");
        }
        //gives error
        if (Input.GetKeyDown(KeyCode.Q))
        {
            JSONSerializer.AppendDataToFile(DateTime.Now.ToString());
        }


        Json convert example
          // string json = JsonUtility.FromJson<T>(File.ReadAllText(fullpath)) as string;

          get type om data typen op te vragen blijkbaar is een decimal opgeslagen als een double :o   lang leven reflection :D
             // Debug.Log(dic["ValueSlider"].GetType());


             ye old load functions
                 /// <summary>
    /// returns class object From File.Read <br></br>
    /// path includes file name
    /// </summary>
    /// <typeparam name="T">Class type that gets returned</typeparam>
    /// <param name="Path">Location of file to read</param>
    /// 
    //public static T Load<T>(string Path) where T : class
    //{
    //    if (PathExists(Path))
    //    {
    //        return JsonConvert.DeserializeObject<T>(File.ReadAllText(Path));
    //       // return JsonUtility.FromJson<T>(File.ReadAllText(Path));
    //    }
    //    //lets tell we didnt find the filepath
    //    Debug.LogWarning("Json couldn't find the path: " + Path);
    //    return default; //default(T)
    //}

    /// <summary>
    /// returns class object From persistentDataPath <br></br>
    /// path excludes file name
    /// </summary>
    /// <typeparam name="T">Class type that gets returned</typeparam>
    /// <param name="Path">Location of file to read</param>
    //public static T Load<T>(string Path, string filename) where T : class
    //{
    //    if (PathExists(Path))
    //    {
    //        return JsonConvert.DeserializeObject<T>(File.ReadAllText(Path + filename));

    //        //  return JsonUtility.FromJson<T>(Application.persistentDataPath + filename);
    //    }
    //    return default;
    //}